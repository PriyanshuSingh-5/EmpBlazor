@page "/emphome"
@using BlazorEmpwage.Data
@using BlazorEmpwage.Services

@inject EmpServices services


@*@inject  List<Employee> list*@

@inject EmpService employeeServices
@*@inject IHttpClientFactory ClientFactory*@
<header class="header-content header">
    <div class="logo-content">
        <img src="/assets/logo.png" alt="logo image">
        <div>
            <span class="emp-text">EMPLOYEE</span><br>
            <span class="emp-text emp-payroll">PAYROLL</span>
        </div>
    </div>
</header>

<div style="margin-left: 800px;background-color: white;"><i class="fa fa-search"></i></div>
<p>
    <a href="/empwage" class="add-button">
        Add User
    </a>
</p>


@if (Emp == null)
{
<p><em>Loading...</em></p> }
            else
            {

<table class='table'>
    <thead>
        <tr>
            <th>EmployeeId</th>
            <th>Name</th>
            <th>Gender</th>
            <th>Department</th>

            <th>Notes</th>

        </tr>
    </thead>
    <tbody>

        @foreach (var emp in Emp)
        {
<tr>
    <td>@emp.EmployeeId</td>
    <td>@emp.Name</td>
    <td>@emp.Gender</td>
    <td>@emp.Department</td>

    <td>@emp.Notes</td>
    <!--<td>-->
    @*<a href="/edit">Edit</a>*@
    @*<a href="@Url.action("Edit,"Home"new {id=@item.EmpId}) class="btn btn-primary">Edit</a>*@
    <!--<a href="/edit" class="add-button">Edit</a>
        <a href="/delete" class="add-button">Delete</a>

    </td>-->
    <td>
        <a class="nav-link" href="edit/@emp.EmployeeId">
            <span class="oi oi-pencil" aria-hidden="true"></span> Edit
        </a>
        <a class="nav-link" href="delete/@emp.EmployeeId">
            <span class="oi oi-trash" aria-hidden="true"></span> Delete
        </a>
    </td>
</tr>}
    </tbody>
</table>}


@*@functions {
        public Employee emp = new Employee();
        public List<Employee> Employee;

        protected override void OnInitialized()
        {
            Employee = employeeServices.GetEmployeesList();
        }
        public async Task OnInitAsync()
        {
            //await httpClient.GetAsync("/api/Employee/Index");
            //httpClient.GetAsync(HttpMethod.Get, "/api/Employee/Index")
            // var request = new HttpRequestMessage(HttpMethod.Get,
            // "/api/Employee/Index");



        }
        //public async Task<string> GetResponseString()
        //{
        //    var request = "/api/Employee/Index";
        //    var response = await httpClient.GetAsync(request);
        //    var content = await response.Content.ReadAsStringAsync();
        //    return content;
        //}
    }*@

@code {

   // public Employee emp = new Employee();
    List<Employee> Emp;
    protected override async Task OnInitializedAsync()
    {
        EmpServices objCS = new EmpServices();
        Emp = await Task.Run(() => objCS.GetEmployee());
    }
}
